#include "Arduino.h"
#include "secrets.h"
#include <WiFiClientSecure.h>
#include <MQTTClient.h>
#include <ArduinoJson.h>
#include "WiFi.h"
#include <IRremoteESP8266.h>
#include <IRsend.h>

#define AWS_IOT_PUBLISH_TOPIC "remote_controller/pub"
#define AWS_IOT_SUBSCRIBE_TOPIC "JVAVM/Pub"

void messageHandler(String &topic, String &payload);

const int irPin = 4;

IRsend irsend(irPin);

WiFiClientSecure net = WiFiClientSecure();
MQTTClient client = MQTTClient(256);

bool acState = false;
bool tvState = false;

void connectAWS()
{
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.println("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);

  client.begin(AWS_IOT_ENDPOINT, 8883, net);
  client.onMessage(messageHandler);

  Serial.print("Connecting to AWS IoT");

  while (!client.connect(THINGNAME))
  {
    Serial.print(".");
    delay(100);
  }

  if (!client.connected())
  {
    Serial.println("AWS IoT Timeout!");
    return;
  }

  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);
  Serial.println("AWS IoT Connected!");
}

void publishMessage(const String &message)
{
  StaticJsonDocument<200> doc;
  doc["status"] = message;

  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer);

  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
}

// Funções para enviar os códigos capturados com base nos dados corretos

uint16_t rawDataOn[371] = {3394, 1648, 378, 1298, 376, 462, 374, 460, 378, 458, 376, 458, 376, 458, 378, 458, 376, 464, 378, 452, 378, 460, 374, 458, 378, 458, 376, 1296, 384, 454, 374, 458, 378, 464, 374, 458, 376, 458, 376, 460, 376, 460, 378, 460, 374, 460, 378, 458, 376, 464, 402, 428, 402, 434, 376, 460, 376, 460, 376, 458, 376, 460, 376, 1296, 376, 464, 376, 1296, 372, 1294, 406, 1268, 378, 1294, 376, 1298, 376, 1296, 378, 456, 378, 1296, 380, 1292, 376, 1294, 378, 1296, 376, 1298, 378, 1296, 374, 1294, 378, 1296, 378, 1298, 376, 456, 378, 458, 376, 462, 376, 458, 376, 458, 376, 460, 376, 460, 400, 438, 376, 458, 376, 1296, 378, 1294, 376, 462, 376, 460, 374, 1298, 376, 1296, 378, 1300, 376, 1294, 400, 434, 378, 460, 376, 1294, 378, 1296, 376, 460, 376, 460, 376, 464, 376, 1292, 394, 444, 376, 460, 376, 1294, 378, 458, 376, 460, 402, 434, 402, 1272, 378, 456, 376, 1296, 378, 1294, 376, 462, 374, 1296, 402, 1270, 376, 1294, 402, 436, 378, 1292, 378, 458, 378, 460, 376, 458, 376, 462, 376, 458, 376, 460, 400, 436, 378, 456, 378, 1294, 376, 1296, 402, 1272, 378, 1296, 376, 1296, 374, 1298, 374, 1302, 400, 1266, 402, 1270, 374, 1298, 374, 1296, 380, 1296, 400, 1270, 376, 460, 376, 462, 402, 430, 378, 458, 374, 460, 376, 460, 378, 456, 406, 430, 376, 1298, 398, 1276, 376, 1292, 376, 458, 406, 430, 382, 456, 376, 460, 374, 1298, 374, 458, 378, 466, 374, 458, 376, 1296, 378, 1292, 380, 1294, 376, 1296, 374, 458, 378, 1296, 404, 1272, 378, 456, 400, 1270, 376, 1296, 378, 460, 374, 458, 380, 460, 376, 1296, 378, 1298, 404, 1266, 400, 436, 402, 432, 378, 1296, 374, 1298, 374, 1296, 378, 458, 402, 436, 402, 432, 376, 460, 376, 460, 378, 458, 376, 460, 374, 460, 376, 460, 378, 460, 376, 1294, 402, 1270, 378, 1296, 376, 1296, 400, 1272, 400, 1270, 376, 1294, 378, 1300, 378, 454, 376, 462, 374, 460, 402, 432, 378, 1298, 374, 460, 378, 458, 402, 1276, 402, 1266, 376, 1296, 378, 1294, 378, 1292, 378, 460, 376, 1294, 376, 1296, 378, 460, 378}; // Código para ligar

uint16_t rawDataOff[371] = {3352, 1670, 406, 1270, 404, 432, 406, 430, 404, 434, 404, 428, 406, 430, 406, 430, 404, 438, 404, 426, 404, 432, 404, 432, 404, 432, 402, 1268, 406, 430, 406, 430, 404, 436, 406, 426, 404, 434, 406, 428, 404, 432, 402, 434, 404, 432, 406, 430, 402, 438, 402, 428, 404, 432, 404, 432, 406, 428, 406, 430, 404, 432, 404, 1268, 406, 434, 404, 1264, 406, 1268, 402, 1270, 404, 1268, 404, 1270, 404, 1268, 406, 430, 404, 1274, 402, 1266, 402, 1268, 404, 1268, 404, 1268, 402, 1268, 404, 1268, 404, 1268, 406, 1270, 404, 428, 406, 432, 402, 432, 406, 428, 406, 430, 404, 434, 404, 432, 404, 434, 406, 424, 406, 1270, 402, 1266, 406, 432, 402, 432, 406, 1268, 404, 1270, 402, 1272, 408, 1264, 402, 432, 404, 430, 406, 1268, 404, 1268, 404, 432, 404, 432, 404, 436, 404, 1264, 402, 434, 402, 432, 404, 1266, 406, 432, 404, 430, 406, 432, 402, 1272, 404, 430, 404, 1268, 404, 1266, 406, 434, 404, 1268, 404, 1270, 404, 1268, 404, 436, 404, 1264, 404, 430, 406, 432, 404, 430, 404, 432, 404, 432, 402, 432, 406, 434, 404, 428, 406, 1268, 404, 1268, 404, 1270, 404, 1268, 404, 1268, 406, 1268, 404, 1272, 404, 1266, 406, 1264, 406, 1266, 404, 1268, 404, 1268, 406, 1268, 404, 432, 404, 434, 404, 428, 406, 430, 406, 432, 404, 432, 406, 430, 404, 430, 406, 1268, 404, 1272, 404, 1264, 406, 430, 406, 430, 404, 434, 404, 430, 406, 1268, 406, 428, 404, 438, 404, 426, 406, 1268, 406, 1266, 406, 1268, 404, 1268, 406, 430, 404, 1270, 404, 1270, 406, 428, 404, 1266, 404, 1270, 404, 432, 404, 430, 406, 430, 404, 1268, 406, 1270, 406, 1264, 404, 432, 402, 432, 404, 1270, 402, 1268, 406, 1266, 406, 432, 402, 436, 406, 428, 404, 430, 404, 432, 406, 430, 406, 430, 402, 434, 404, 430, 404, 436, 406, 1262, 406, 1266, 406, 1268, 402, 1268, 404, 1268, 406, 1268, 406, 1268, 404, 1272, 404, 428, 406, 430, 404, 432, 406, 430, 404, 432, 404, 1270, 402, 430, 406, 1272, 404, 1264, 402, 1268, 404, 1268, 404, 1272, 404, 1266, 406, 430, 404, 1270, 404, 432, 404}; // Código para desligar

uint16_t rawDataTemp19[275] = {3400, 1644, 402, 1274, 402, 434, 404, 432, 404, 432, 404, 432, 402, 436, 402, 432, 404, 436, 402, 428, 404, 434, 404, 432, 404, 434, 404, 1268, 404, 432, 404, 432, 402, 438, 402, 430, 402, 436, 402, 432, 404, 432, 404, 432, 402, 436, 404, 428, 404, 438, 402, 428, 402, 434, 402, 434, 402, 432, 406, 430, 406, 430, 404, 1270, 406, 436, 404, 1264, 404, 1266, 406, 1268, 402, 1272, 402, 1270, 402, 1270, 404, 430, 406, 1272, 404, 1264, 406, 1268, 402, 1270, 404, 1270, 402, 1270, 404, 1270, 404, 1270, 402, 1272, 404, 430, 402, 432, 406, 432, 402, 432, 404, 430, 406, 432, 404, 434, 404, 434, 404, 1266, 402, 1270, 404, 432, 402, 434, 404, 430, 404, 1268, 406, 1268, 404, 1274, 406, 424, 406, 432, 404, 1268, 402, 1268, 404, 1268, 404, 432, 404, 432, 406, 434, 402, 1266, 404, 432, 404, 432, 402, 1268, 404, 432, 404, 432, 404, 432, 402, 1272, 406, 428, 404, 1270, 406, 1266, 402, 432, 406, 1270, 404, 1268, 404, 1268, 402, 436, 404, 426, 406, 430, 404, 432, 406, 1268, 404, 434, 402, 430, 404, 434, 404, 432, 404, 1266, 406, 1270, 404, 1268, 404, 430, 410, 1264, 402, 1268, 406, 1268, 404, 1274, 404, 1264, 406, 1268, 404, 1268, 404, 1270, 402, 1270, 406, 1268, 404, 432, 402, 436, 404, 430, 404, 430, 404, 432, 404, 432, 406, 432, 402, 432, 406, 1268, 404, 1272, 404, 1266, 404, 432, 404, 430, 404, 1270, 402, 1270, 404, 432, 402, 434, 404, 434, 406, 426, 406, 1270, 402, 1270, 404, 430, 408, 430, 404, 1268, 406, 1268, 404, 1272, 404};

uint16_t rawDataTemp20[275] = {3368, 1674, 380, 1296, 378, 458, 378, 456, 380, 456, 382, 454, 378, 458, 378, 458, 380, 460, 404, 426, 380, 458, 376, 458, 380, 458, 378, 1294, 380, 456, 378, 456, 380, 460, 380, 452, 380, 458, 378, 456, 380, 458, 376, 458, 380, 458, 380, 456, 378, 462, 380, 454, 378, 458, 378, 458, 380, 456, 378, 460, 378, 458, 378, 1296, 378, 458, 378, 1290, 380, 1292, 380, 1292, 380, 1292, 406, 1266, 406, 1268, 378, 456, 400, 1276, 406, 1264, 400, 1272, 378, 1294, 406, 1266, 378, 1296, 378, 1296, 378, 1294, 380, 1294, 406, 428, 380, 456, 406, 430, 380, 456, 380, 456, 406, 432, 404, 432, 406, 432, 378, 1290, 404, 1270, 402, 430, 404, 434, 378, 456, 378, 1294, 380, 1292, 380, 1298, 406, 424, 380, 456, 406, 1266, 408, 1268, 404, 1268, 378, 458, 378, 458, 380, 460, 378, 1292, 378, 456, 406, 432, 380, 1290, 380, 458, 406, 428, 406, 430, 378, 1300, 402, 430, 378, 1294, 380, 1294, 376, 458, 406, 1268, 404, 1270, 406, 1264, 380, 462, 378, 1288, 380, 458, 404, 432, 378, 1292, 380, 458, 404, 430, 378, 460, 404, 434, 378, 454, 380, 1292, 380, 1294, 380, 456, 404, 1270, 378, 1292, 380, 1296, 378, 1296, 378, 1290, 378, 1296, 378, 1292, 404, 1270, 378, 1298, 378, 1294, 376, 458, 378, 460, 380, 452, 380, 454, 382, 454, 382, 456, 378, 458, 380, 456, 378, 1296, 406, 1270, 404, 1264, 404, 1270, 380, 456, 378, 1294, 378, 1294, 404, 434, 378, 456, 380, 458, 380, 454, 380, 454, 380, 1294, 380, 456, 378, 458, 380, 1292, 378, 1294, 380, 1294, 380};

uint16_t rawDataTemp21[275] = {3372, 1670, 402, 1276, 404, 428, 404, 434, 402, 434, 402, 434, 404, 434, 402, 434, 402, 436, 404, 428, 404, 432, 404, 434, 400, 434, 404, 1270, 404, 432, 404, 434, 402, 434, 404, 430, 402, 434, 404, 434, 402, 432, 402, 434, 404, 434, 402, 434, 404, 436, 402, 428, 402, 432, 404, 434, 402, 432, 406, 430, 406, 432, 404, 1266, 402, 440, 402, 1266, 404, 1270, 402, 1270, 402, 1268, 402, 1270, 404, 1268, 404, 434, 404, 1272, 404, 1264, 404, 1268, 404, 1272, 402, 1268, 406, 1268, 404, 1270, 404, 1270, 402, 1274, 402, 428, 402, 434, 404, 432, 402, 436, 402, 432, 402, 434, 402, 434, 402, 436, 404, 1268, 404, 1268, 402, 436, 404, 434, 400, 434, 404, 1268, 404, 1268, 404, 1272, 404, 432, 402, 432, 406, 1268, 402, 1272, 402, 1266, 404, 434, 404, 434, 402, 434, 404, 1266, 404, 432, 404, 432, 404, 1268, 404, 430, 404, 432, 404, 432, 402, 1274, 402, 430, 404, 1266, 404, 1270, 404, 432, 402, 1270, 404, 1268, 404, 1268, 402, 438, 404, 1266, 402, 434, 404, 432, 402, 1270, 404, 432, 402, 432, 404, 432, 402, 436, 404, 430, 404, 1268, 402, 1268, 404, 432, 402, 1270, 402, 1270, 404, 1270, 400, 1274, 404, 1266, 404, 1268, 404, 1268, 402, 1272, 402, 1270, 406, 1268, 404, 432, 406, 416, 422, 428, 404, 434, 402, 432, 404, 432, 400, 434, 404, 434, 404, 1268, 404, 1272, 406, 1266, 402, 432, 404, 1272, 402, 1266, 406, 1268, 402, 434, 402, 432, 404, 436, 404, 428, 404, 1268, 404, 436, 400, 432, 402, 434, 402, 1270, 402, 1270, 402, 1274, 404};

uint16_t rawDataTemp22[275] = {3372, 1672, 404, 1272, 404, 434, 402, 432, 402, 434, 404, 430, 404, 432, 402, 434, 404, 436, 404, 428, 404, 432, 402, 432, 402, 436, 400, 1272, 402, 432, 402, 434, 402, 438, 404, 428, 412, 426, 404, 432, 406, 430, 404, 432, 404, 432, 402, 432, 404, 436, 402, 430, 402, 434, 402, 434, 406, 430, 404, 430, 404, 432, 402, 1270, 404, 436, 404, 1264, 404, 1270, 402, 1270, 404, 1268, 402, 1272, 406, 1268, 402, 432, 404, 1272, 404, 1264, 406, 1266, 404, 1270, 402, 1270, 402, 1272, 402, 1270, 402, 1270, 402, 1272, 402, 430, 406, 430, 408, 430, 402, 432, 402, 434, 404, 432, 402, 436, 402, 434, 406, 1264, 402, 1272, 402, 432, 404, 432, 430, 404, 404, 1272, 402, 1268, 402, 1274, 378, 454, 406, 430, 378, 1294, 380, 1294, 380, 1294, 380, 454, 382, 458, 378, 460, 380, 1288, 380, 458, 378, 456, 404, 1270, 402, 434, 404, 430, 404, 434, 402, 1274, 402, 430, 408, 1264, 406, 1266, 402, 434, 402, 1270, 404, 1272, 404, 1266, 402, 438, 402, 1264, 406, 432, 402, 434, 404, 1268, 404, 432, 402, 432, 404, 434, 402, 436, 404, 428, 406, 1268, 404, 1270, 402, 434, 404, 1270, 402, 1268, 404, 1272, 402, 1270, 404, 1266, 406, 1268, 402, 1270, 402, 1270, 404, 1268, 404, 1270, 404, 432, 404, 436, 404, 428, 402, 432, 404, 432, 404, 432, 404, 432, 402, 432, 404, 1268, 406, 1272, 404, 1264, 404, 1270, 402, 1270, 402, 1268, 404, 1272, 402, 432, 404, 432, 402, 438, 402, 428, 404, 434, 402, 432, 404, 434, 402, 432, 402, 1270, 404, 1268, 402, 1272, 402};

uint16_t rawDataTemp23[275] = {3400, 1644, 376, 1300, 376, 460, 404, 434, 376, 458, 402, 434, 378, 456, 378, 458, 378, 462, 378, 454, 376, 460, 404, 432, 378, 458, 406, 1266, 402, 436, 376, 458, 380, 460, 378, 456, 400, 434, 406, 428, 380, 456, 376, 460, 406, 432, 378, 456, 404, 436, 378, 454, 402, 434, 380, 456, 402, 432, 376, 460, 378, 458, 376, 1296, 378, 462, 378, 1292, 378, 1294, 406, 1266, 378, 1294, 378, 1296, 404, 1270, 378, 456, 378, 1300, 404, 1262, 380, 1294, 378, 1294, 378, 1296, 404, 1268, 378, 1294, 404, 1268, 378, 1298, 380, 454, 378, 460, 376, 458, 378, 458, 376, 458, 378, 460, 376, 458, 380, 460, 404, 1266, 378, 1296, 402, 434, 374, 458, 376, 460, 402, 1270, 406, 1268, 378, 1298, 378, 454, 378, 458, 376, 1296, 378, 1294, 404, 1268, 378, 460, 378, 456, 378, 464, 402, 1266, 404, 432, 380, 458, 402, 1268, 378, 458, 378, 458, 402, 436, 376, 1298, 380, 452, 380, 1294, 376, 1296, 378, 458, 376, 1298, 404, 1268, 406, 1266, 406, 432, 406, 1264, 404, 432, 376, 458, 404, 1270, 380, 456, 404, 430, 378, 458, 404, 436, 404, 428, 406, 1266, 376, 1296, 380, 456, 404, 1270, 406, 1268, 404, 1268, 404, 1272, 406, 1266, 376, 1296, 404, 1268, 404, 1268, 404, 1270, 376, 1294, 380, 458, 402, 438, 404, 428, 404, 432, 404, 430, 380, 456, 380, 456, 404, 434, 404, 1266, 406, 1270, 404, 1268, 404, 430, 406, 430, 376, 458, 404, 434, 402, 1268, 406, 430, 404, 436, 378, 454, 376, 1296, 404, 1272, 374, 1294, 378, 1296, 380, 456, 378, 1294, 408, 1270, 378};

uint16_t rawDataTemp24[275] = {3402, 1644, 404, 1272, 404, 434, 402, 432, 402, 434, 404, 430, 404, 436, 398, 432, 404, 436, 404, 428, 430, 406, 402, 432, 406, 430, 402, 1270, 404, 430, 404, 434, 404, 436, 406, 428, 402, 432, 404, 432, 402, 434, 430, 406, 404, 432, 404, 432, 404, 436, 402, 428, 434, 404, 404, 432, 404, 432, 402, 430, 404, 434, 402, 1270, 410, 430, 402, 1266, 402, 1272, 402, 1270, 404, 1268, 404, 1268, 434, 1242, 404, 432, 402, 1274, 430, 1238, 402, 1268, 402, 1272, 400, 1270, 404, 1268, 404, 1268, 432, 1240, 406, 1272, 402, 430, 404, 430, 404, 432, 402, 434, 402, 434, 404, 432, 406, 432, 404, 434, 404, 1266, 406, 1266, 404, 432, 404, 434, 404, 432, 404, 1268, 430, 1242, 406, 1272, 406, 426, 404, 432, 402, 1270, 404, 1270, 402, 1270, 402, 432, 432, 406, 402, 436, 404, 1266, 404, 434, 402, 434, 402, 1270, 402, 434, 402, 432, 432, 402, 430, 1246, 402, 428, 406, 1268, 404, 1268, 404, 434, 404, 1268, 404, 1272, 402, 1268, 402, 436, 404, 1266, 402, 432, 402, 434, 406, 1266, 406, 432, 402, 432, 404, 432, 402, 436, 434, 398, 406, 1268, 404, 1272, 402, 432, 404, 1268, 404, 1272, 402, 1270, 400, 1272, 404, 1266, 404, 1268, 434, 1242, 402, 1270, 400, 1270, 404, 1268, 402, 432, 404, 436, 402, 430, 402, 436, 402, 432, 402, 434, 402, 432, 404, 430, 404, 1268, 402, 1274, 404, 1262, 404, 1270, 404, 430, 406, 430, 404, 432, 404, 1268, 402, 436, 402, 438, 404, 430, 402, 432, 406, 1266, 402, 1270, 402, 1270, 404, 434, 402, 1268, 406, 1268, 406};

uint16_t rawDataTemp25[275] = {3398, 1644, 402, 1276, 402, 412, 424, 430, 404, 432, 430, 406, 404, 430, 406, 432, 400, 436, 402, 432, 400, 434, 404, 432, 402, 432, 406, 1268, 404, 430, 404, 432, 402, 438, 404, 426, 404, 432, 404, 436, 402, 430, 404, 434, 400, 434, 402, 432, 402, 440, 402, 428, 404, 430, 402, 434, 404, 432, 406, 432, 402, 434, 404, 1268, 404, 436, 404, 1264, 408, 1268, 402, 1270, 404, 1268, 402, 1272, 402, 1270, 404, 434, 402, 1272, 404, 1266, 404, 1268, 404, 1270, 406, 1266, 404, 1272, 402, 1258, 414, 1248, 424, 1272, 400, 432, 402, 432, 404, 434, 402, 432, 404, 434, 402, 430, 406, 430, 404, 436, 402, 1266, 404, 1270, 404, 434, 402, 432, 402, 432, 404, 1270, 404, 1270, 402, 1274, 404, 430, 402, 434, 404, 1270, 402, 1268, 404, 1272, 400, 434, 404, 432, 404, 436, 400, 1270, 402, 434, 402, 434, 402, 1268, 404, 432, 402, 432, 432, 404, 404, 1272, 404, 428, 404, 1268, 404, 1270, 402, 434, 430, 1240, 404, 1268, 406, 1268, 402, 436, 406, 1264, 406, 432, 404, 430, 406, 1268, 404, 430, 404, 432, 404, 434, 404, 436, 402, 430, 404, 1266, 434, 1240, 402, 434, 404, 1266, 404, 1268, 404, 1268, 436, 1242, 404, 1266, 434, 1240, 402, 1272, 402, 1270, 402, 1270, 404, 1268, 404, 432, 380, 458, 404, 430, 402, 432, 404, 434, 404, 434, 434, 400, 406, 432, 404, 1266, 404, 1276, 402, 1266, 404, 430, 406, 1268, 406, 430, 404, 432, 402, 1270, 404, 434, 404, 434, 404, 428, 406, 1266, 406, 432, 404, 1266, 406, 1268, 430, 406, 404, 1268, 406, 1272, 404};

uint16_t rawDataTemp26[275] = {3376, 1670, 406, 1270, 404, 432, 378, 458, 406, 430, 376, 456, 406, 430, 406, 430, 378, 464, 376, 454, 404, 430, 406, 430, 404, 432, 406, 1268, 406, 432, 404, 430, 406, 432, 380, 454, 378, 460, 408, 428, 406, 428, 378, 460, 378, 458, 406, 430, 376, 462, 406, 426, 408, 428, 406, 430, 406, 430, 378, 456, 406, 430, 406, 1268, 406, 434, 402, 1266, 406, 1268, 404, 1270, 378, 1294, 408, 1264, 408, 1266, 408, 428, 406, 1270, 380, 1290, 406, 1264, 410, 1264, 406, 1266, 410, 1264, 380, 1292, 406, 1268, 380, 1296, 408, 428, 404, 430, 406, 430, 404, 430, 406, 430, 404, 432, 380, 458, 406, 434, 380, 1288, 406, 1266, 406, 430, 406, 430, 406, 430, 406, 1266, 406, 1264, 410, 1270, 406, 426, 376, 458, 404, 1266, 406, 1270, 406, 1266, 404, 430, 408, 430, 378, 460, 406, 1262, 408, 428, 406, 430, 406, 1266, 408, 432, 404, 428, 406, 430, 408, 1268, 406, 428, 378, 1298, 404, 1268, 404, 428, 406, 1266, 408, 1266, 406, 1268, 376, 462, 408, 1260, 406, 430, 410, 426, 410, 1264, 408, 428, 406, 430, 408, 428, 408, 430, 408, 426, 406, 1266, 406, 1266, 406, 428, 406, 1266, 406, 1268, 404, 1270, 406, 1270, 402, 1266, 406, 1266, 378, 1294, 406, 1270, 404, 1270, 376, 1292, 378, 460, 376, 462, 378, 456, 376, 460, 376, 458, 378, 460, 376, 458, 376, 460, 378, 1296, 376, 1298, 376, 1292, 404, 1272, 374, 1296, 378, 460, 376, 458, 376, 1296, 376, 462, 376, 462, 374, 456, 378, 460, 376, 462, 374, 1296, 376, 1296, 378, 458, 376, 1300, 374, 1298, 380};

uint16_t rawDataTemp27[275] = {3370, 1674, 402, 1274, 404, 430, 402, 434, 404, 434, 402, 432, 404, 432, 402, 436, 398, 440, 402, 428, 402, 434, 402, 432, 402, 436, 400, 1272, 400, 436, 402, 434, 400, 438, 402, 428, 404, 434, 400, 434, 402, 434, 402, 432, 402, 434, 404, 432, 402, 436, 378, 456, 402, 434, 400, 434, 402, 434, 400, 434, 402, 432, 404, 1268, 406, 434, 400, 1268, 404, 1268, 402, 1270, 404, 1268, 402, 1272, 402, 1270, 402, 434, 400, 1276, 402, 1268, 402, 1268, 404, 1270, 404, 1270, 404, 1268, 378, 1298, 402, 1272, 402, 1274, 374, 458, 402, 432, 376, 460, 402, 434, 376, 462, 376, 460, 402, 434, 378, 462, 402, 1266, 404, 1268, 378, 460, 376, 460, 404, 432, 376, 1296, 378, 1294, 378, 1300, 376, 458, 374, 460, 376, 1296, 404, 1270, 402, 1268, 402, 436, 378, 460, 376, 462, 376, 1294, 374, 462, 376, 460, 378, 1294, 376, 460, 378, 458, 378, 460, 374, 1302, 402, 430, 402, 1270, 402, 1270, 404, 432, 402, 1270, 376, 1298, 402, 1270, 402, 438, 404, 1264, 376, 462, 400, 436, 406, 1268, 400, 434, 378, 458, 402, 436, 400, 436, 400, 432, 402, 1270, 402, 1272, 404, 434, 400, 1270, 404, 1270, 402, 1268, 402, 1276, 400, 1266, 402, 1270, 378, 1296, 376, 1298, 402, 1270, 402, 1270, 402, 436, 402, 436, 404, 428, 376, 460, 376, 460, 402, 434, 402, 440, 396, 432, 376, 1298, 376, 1298, 404, 1268, 400, 434, 402, 434, 376, 1296, 404, 432, 404, 1270, 400, 432, 406, 436, 400, 432, 404, 1266, 378, 1296, 404, 434, 400, 1272, 404, 432, 400, 1270, 378, 1296, 404};

uint16_t rawDataTemp28[275] = {3372, 1672, 404, 1272, 404, 432, 402, 434, 404, 432, 404, 430, 404, 432, 404, 432, 402, 438, 406, 426, 406, 430, 404, 434, 402, 436, 400, 1270, 404, 432, 404, 432, 404, 436, 402, 430, 404, 434, 402, 430, 402, 434, 404, 438, 398, 436, 402, 432, 400, 438, 404, 428, 404, 432, 404, 432, 432, 404, 402, 434, 402, 432, 432, 1240, 406, 434, 404, 1264, 396, 1278, 404, 1270, 400, 1270, 402, 1270, 402, 1272, 402, 432, 404, 1272, 408, 1260, 378, 1294, 404, 1270, 378, 1296, 376, 1296, 376, 1294, 380, 1296, 378, 1296, 406, 428, 378, 456, 378, 456, 406, 428, 382, 456, 404, 434, 404, 430, 380, 460, 404, 1264, 378, 1294, 408, 430, 406, 430, 380, 456, 406, 1266, 406, 1268, 378, 1298, 406, 424, 406, 430, 406, 1266, 406, 1266, 406, 1268, 406, 432, 378, 458, 380, 460, 378, 1290, 380, 456, 380, 456, 380, 1292, 380, 458, 378, 456, 378, 460, 378, 1296, 378, 454, 378, 1294, 378, 1298, 400, 434, 378, 1292, 380, 1294, 402, 1270, 378, 462, 404, 1264, 406, 432, 402, 432, 406, 1268, 404, 434, 402, 432, 404, 434, 402, 436, 402, 430, 376, 1296, 404, 1268, 404, 434, 404, 1268, 430, 1242, 404, 1270, 404, 1272, 404, 1264, 404, 1268, 402, 1270, 402, 1270, 402, 1270, 404, 1266, 404, 432, 402, 438, 404, 428, 404, 432, 404, 432, 404, 432, 380, 456, 434, 402, 404, 1270, 406, 1268, 404, 1268, 402, 1272, 402, 432, 402, 1270, 402, 434, 404, 1268, 406, 430, 404, 434, 402, 430, 406, 430, 406, 1268, 404, 432, 404, 1268, 406, 432, 402, 1270, 404, 1272, 402};

uint16_t rawDataTemp29[275] = {3374, 1670, 404, 1272, 404, 434, 402, 432, 402, 434, 404, 432, 406, 428, 404, 432, 434, 406, 402, 430, 376, 460, 402, 434, 404, 432, 378, 1294, 378, 458, 380, 456, 378, 462, 378, 456, 376, 456, 380, 454, 380, 458, 380, 456, 406, 432, 378, 456, 380, 460, 378, 452, 380, 456, 380, 456, 406, 430, 382, 456, 378, 456, 380, 1294, 378, 462, 402, 1266, 430, 1244, 400, 1270, 404, 1268, 404, 1268, 406, 1268, 434, 400, 406, 1274, 404, 1264, 404, 1268, 402, 1270, 404, 1270, 404, 1270, 404, 1270, 402, 1270, 404, 1270, 404, 430, 404, 432, 402, 434, 402, 432, 406, 432, 404, 432, 402, 434, 402, 436, 402, 1268, 402, 1272, 402, 432, 404, 434, 402, 432, 402, 1272, 400, 1270, 402, 1274, 404, 428, 404, 432, 404, 1270, 402, 1268, 406, 1268, 404, 432, 404, 432, 404, 436, 402, 1266, 404, 436, 398, 436, 402, 1268, 404, 434, 402, 434, 400, 434, 402, 1274, 402, 430, 404, 1268, 402, 1268, 404, 432, 404, 1268, 406, 1270, 404, 1268, 376, 464, 402, 1268, 402, 432, 404, 434, 404, 1270, 402, 432, 402, 434, 402, 434, 404, 434, 404, 432, 402, 1268, 408, 1266, 404, 432, 404, 1268, 404, 1270, 402, 1272, 400, 1274, 432, 1240, 404, 1270, 402, 1268, 432, 1242, 404, 1268, 404, 1268, 404, 434, 378, 460, 404, 428, 432, 406, 402, 430, 406, 432, 404, 432, 404, 430, 406, 1268, 404, 1272, 404, 1266, 404, 432, 404, 1270, 402, 1270, 408, 428, 404, 1270, 404, 430, 404, 436, 404, 430, 378, 1294, 402, 432, 406, 430, 404, 1268, 404, 432, 404, 1268, 404, 1274, 402};

uint16_t rawDataTemp30[275] = {3368, 1674, 404, 1276, 380, 452, 404, 432, 402, 434, 400, 436, 402, 436, 400, 434, 404, 436, 400, 432, 402, 432, 402, 436, 376, 458, 404, 1268, 404, 434, 404, 432, 372, 466, 404, 430, 400, 434, 402, 434, 400, 436, 374, 462, 400, 434, 400, 436, 374, 466, 374, 460, 400, 434, 404, 432, 400, 436, 402, 434, 402, 436, 402, 1270, 400, 438, 402, 1268, 402, 1270, 402, 1270, 402, 1270, 400, 1272, 400, 1272, 402, 434, 402, 1274, 400, 1268, 400, 1270, 404, 1270, 404, 1270, 376, 1296, 402, 1270, 378, 1298, 374, 1300, 376, 454, 376, 460, 376, 460, 376, 462, 374, 462, 374, 460, 376, 460, 376, 462, 376, 1296, 374, 1296, 376, 460, 376, 460, 376, 458, 376, 1298, 376, 1296, 378, 1298, 376, 458, 378, 456, 378, 1296, 376, 1298, 376, 1294, 378, 458, 378, 456, 378, 462, 376, 1294, 376, 460, 376, 460, 376, 1296, 376, 458, 378, 460, 374, 460, 376, 1300, 378, 454, 378, 1294, 376, 1296, 376, 460, 376, 1296, 376, 1298, 376, 1294, 376, 464, 376, 1294, 378, 460, 374, 458, 378, 1296, 376, 458, 378, 458, 378, 460, 378, 462, 376, 456, 376, 1296, 376, 1296, 378, 456, 378, 1296, 376, 1298, 378, 1294, 378, 1298, 376, 1296, 378, 1292, 378, 1296, 378, 1294, 378, 1296, 378, 1296, 376, 462, 376, 462, 376, 456, 374, 460, 376, 460, 376, 458, 378, 458, 376, 460, 376, 1296, 376, 1300, 378, 1292, 376, 1296, 376, 1296, 376, 1296, 378, 458, 376, 1298, 376, 460, 376, 462, 376, 456, 376, 460, 378, 460, 374, 458, 378, 1298, 376, 458, 376, 1296, 376, 1300, 376};

uint16_t rawDataTvOn[71] = {9060, 4442, 622, 512, 566, 566, 622, 1648, 616, 514, 620, 516, 618, 516, 620, 514, 618, 514, 620, 1646, 620, 1648, 618, 516, 620, 1646, 568, 1700, 622, 1648, 620, 1648, 566, 1702, 616, 514, 568, 568, 566, 566, 566, 1704, 566, 566, 566, 568, 568, 564, 568, 566, 568, 1700, 566, 1702, 568, 1698, 568, 568, 564, 1702, 568, 1700, 568, 1700, 570, 1698, 566, 40004, 9032, 2250, 572}; // Código para ligar a TV

uint16_t rawDataTvOff[71] = {9030, 4494, 570, 564, 566, 566, 568, 1700, 568, 564, 568, 566, 566, 564, 568, 564, 568, 566, 570, 1698, 566, 1700, 568, 564, 568, 1700, 568, 1700, 566, 1702, 568, 1696, 568, 1700, 568, 566, 570, 564, 568, 566, 568, 1698, 568, 564, 570, 564, 570, 564, 568, 566, 566, 1700, 568, 1698, 568, 1700, 568, 564, 568, 1698, 568, 1700, 568, 1698, 570, 1698, 568, 40002, 9030, 2254, 570}; // Código para desligar a TV

// Funções para enviar os códigos IR
void sendIrOn()
{
  irsend.sendRaw(rawDataOn, 371, 38);
  publishMessage("AC turned ON");
}

void sendIrOff()
{
  irsend.sendRaw(rawDataOff, 371, 38);
  publishMessage("AC turned OFF");
}

void sendIrTemp19()
{
  irsend.sendRaw(rawDataTemp19, 275, 38);
  publishMessage("Temperature increased to 19° Celcius");
}

void sendIrTemp20()
{
  irsend.sendRaw(rawDataTemp20, 275, 38);
  publishMessage("Temperature increased to 20° Celcius");
}

void sendIrTemp21()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 21° Celcius");
}

void sendIrTemp22()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 22° Celcius");
}

void sendIrTemp23()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 23° Celcius");
}

void sendIrTemp24()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 24° Celcius");
}

void sendIrTemp25()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 25° Celcius");
}

void sendIrTemp26()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 26° Celcius");
}

void sendIrTemp27()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 27° Celcius");
}

void sendIrTemp28()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 28° Celcius");
}

void sendIrTemp29()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 29° Celcius");
}

void sendIrTemp30()
{
  irsend.sendRaw(rawDataTemp21, 275, 38);
  publishMessage("Temperature increased to 30° Celcius");
}

void sendIrTvOn()
{
  irsend.sendRaw(rawDataTvOn, 71, 38);
  publishMessage("TV turned ON");
}

void sendIrTvOff()
{
  irsend.sendRaw(rawDataTvOff, 71, 38);
  publishMessage("TV turned OFF");
}

void controlAC()
{
  if (acState)
  {
    sendIrOn(); // Ligar o AC
  }
  else
  {
    sendIrOff(); // Desligar o AC
  }
}

void controlTV()
{
  if (tvState)
  {
    sendIrTvOn(); // Ligar a TV
  }
  else
  {
    sendIrTvOff(); // Desligar a TV
  }
}

void sendIrTemperatureCode(float temperature)
{
  if (temperature == 19.0)
  {
    sendIrTemp19();
  }
  else if (temperature == 20.0)
  {
    sendIrTemp20();
  }
  else if (temperature == 21.0)
  {
    sendIrTemp21();
  }

  else if (temperature == 22.0)
  {
    sendIrTemp22();
  }
  else if (temperature == 23.0)
  {
    sendIrTemp23();
  }
  else if (temperature == 24.0)
  {
    sendIrTemp24();
  }
  else if (temperature == 25.0)
  {
    sendIrTemp25();
  }
  else if (temperature == 26.0)
  {
    sendIrTemp26();
  }
  else if (temperature == 27.0)
  {
    sendIrTemp27();
  }
  else if (temperature == 28.0)
  {
    sendIrTemp28();
  }
  else if (temperature == 29.0)
  {
    sendIrTemp29();
  }
  else if (temperature == 30.0)
  {
    sendIrTemp30();
  }
}

void messageHandler(String &topic, String &payload)
{
  Serial.println("incoming: " + topic + " - " + payload);

  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, payload);

  if (error)
  {
    Serial.print("deserializeJson() failed: ");
    Serial.println(error.c_str());
    return;
  }

  if (doc.containsKey("power"))
  {
    acState = doc["power"];
    tvState = doc["power"];
    controlAC();

    delay(1000);

    controlTV();
  }

  // Controle de ligar/desligar AC
  if (doc.containsKey("powerAC"))
  {
    acState = doc["powerAC"];
    controlAC();
  }

  // Controle de ligar/desligar TV
  if (doc.containsKey("powerTV"))
  {
    tvState = doc["powerTV"];
    controlTV();
  }

  if (doc.containsKey("temperature"))
  {
    float temperature = doc["temperature"];

    if (temperature >= 19.0 && temperature <= 30.0)
    {
      sendIrTemperatureCode(temperature);
    }
    else
    {
      Serial.println("Temperatura fora dos limites suportados (19.0 a 30.0)");
    }
  }
}

void setup()
{
  irsend.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif // ESP8266

  connectAWS();
}

void loop()
{
  client.loop();
  delay(1000);
}